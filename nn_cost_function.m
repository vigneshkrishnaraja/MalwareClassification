function [ J, gradient ] = nn_cost_function( theta, input_layer_size,hidden_layer_size, ...
                                              X, y)
%Syntax: [ J, theta ] = nn_cost_function( theta, input_layer_size,hidden_layer_size, ...
%                                             X, y)
%   
% This function returns the cost and gradient values after the backpropogation step.
% Required Input Arguments: theta - theta(Ls) combined in a single array 
%                           input_layer_size - Input Layer size
%                           hidden_layer_size - Number of Hidden Units
%                           X - Input Features
%                           y - Labels
%
% Output Arguments: J - Cost
%                   gradient - 

if size(y,1) == 1
    y = y.';
end

if size(X,1) == 1
    X = X.';
end

% m is Number of samples
m = size(X,1);

% Reshaping theta values into theta1 and theta2
theta1 = reshape(theta(1:((input_layer_size+1)*hidden_layer_size)), ...
            [hidden_layer_size,input_layer_size+1]);
theta2 = reshape(theta(((input_layer_size+1)*hidden_layer_size)+1:end), ...
            [9,hidden_layer_size+1]);
        
% Converting y values to ylabel vectors
ylabels = full(ind2vec(y.'));

% Adding ones to Feature Vector
a1 = [ones(m,1) X];

% Doing forward propogation for hidden layer 
z2 = theta1 * a1.';
a2 = compute_sigmoid(z2); 

% Adding Bias(ones) to hidden layer
a2 = [ones(1,size(a2,2)); a2];

% Doing forward propogation for output layer
z3 = theta2 * a2;
h = compute_sigmoid(z3);

% Computing the cost using logistic error
J = -1/m * sum(sum((ylabels .* log(h) + (1 - ylabels) .* log(1 - h))));

% Doing Backpropogation to compute delta3 and delta2
delta3 = h - ylabels;

delta2_intermediate = theta2.' * delta3;
delta2 = delta2_intermediate(2:end,:) .* (compute_sigmoid(z2) .* (1-compute_sigmoid(z2)));

% Computing thetax_gradient
theta2_gradient = delta3 * a2.'/m;
theta1_gradient = delta2 * a1/m;

% Arranging thetax_gradient in a single column vector
gradient = [theta1_gradient(:);theta2_gradient(:)];

end

