% Clearing all the variables and closing all other MATLAB windows
clc; clear variables; close all;
%% Reading in the trainLabels
trainLabels = readtable('/Users/vigneshkrishnaraja/Desktop/trainLabels.csv');
y = trainLabels(:,2);
y = table2dataset(y);
y = double(y);
%% Reading Data
X = zeros(size(trainLabels,1),4096);
for i=5773:5867
    myfilename = sprintf('/Users/vigneshkrishnaraja/Desktop/train/%s.bytes',...
        trainLabels.Id{i});
    X(i,:) = readAndProcessBinaryFile(myfilename);
end
save Malware_Classification_DATA X y

%% Loading Malware_Data_that has been generated
data = load('Malware_Classification_DATA.mat');

X = data.X;
y = data.y;

% Setting the Random seend
rand('seed',12);
% Number of samples
m = size(X,1);

% Normalizing features before the split
X = normalize_features(X);

% Splitting Dataset for training and validation
num_valid = round(0.2*m);
valid_idx = randperm(m,num_valid); %generating random indices for the split

X_valid = X(valid_idx,:);
y_valid = y(valid_idx,:);

X_train = X(setdiff(1:m,valid_idx),:);
y_train = y(setdiff(1:m,valid_idx),:);

% Setting the Number of PCA features for each classification Algorithm
N_PCA_kNN = 12;
N_PCA_SVM = 10;
N_PCA_NN = 52;

%% Applying PCA Transformation
[A_kNN, T_train_kNN, eigen_values_kNN,X_cov_kNN] = PCA_transformation(X_train,N_PCA_kNN);
[A_SVM, T_train_SVM, eigen_values_SVM,X_cov_SVM] = PCA_transformation(X_train,N_PCA_SVM);
[A_NN, T_train_NN, eigen_values_NN,X_cov_NN] = PCA_transformation(X_train,N_PCA_NN);

% Transforming X_valid matrix with respective X_train's transformation matrix for each Algorithm
T_valid_kNN = X_valid * A_kNN;
T_valid_SVM = X_valid * A_SVM;
T_valid_NN = X_valid * A_NN;

%% Training T_train_kNN set with kNN with k=1
knn = fitcknn(T_train_kNN,y_train,'Distance','euclidean', ...
    'NumNeighbors',1,'DistanceWeight','squaredinverse','StandardizeData',1);

%% Predicting with T_valid_kNN feature set
y_predict_kNN = predict(knn, T_valid_kNN);

%% Plotting the confusion matrix for kNN
figure
plotconfusion(full(ind2vec(y_valid.')),full(ind2vec(y_predict_kNN.')))

%% Training T_train_SVM with SVM with a Quadratic Kernel
t = templateSVM('KernelFunction','polynomial','PolynomialOrder',2,'Standardize',1);
svm = fitcecoc(T_train_SVM,y_train,'Learners',t);

%% Predicting with T_valid_SVM feature set
y_predict_SVM = predict(svm, T_valid_SVM);

%% Plotting the confusion matrix for SVM
figure
plotconfusion(full(ind2vec(y_valid.')),full(ind2vec(y_predict_SVM.')))

%% Neural Network with 1 hidden layer 
% Setting the size of hidden and output layer
hidden_layer_size = 100;
input_layer_size = size(T_train_NN,2);

% Setting random values for theta1 and theta2 within the range [-1 1]
theta1 = 2 .* rand(hidden_layer_size, input_layer_size+1) - 1;
theta2 = 2 .* rand(9, hidden_layer_size+1) - 1;

initial_theta = [theta1(:);theta2(:)];

% Computing cost using nn_cost_function
[J, gradient] = nn_cost_function(initial_theta,input_layer_size,hidden_layer_size,T_train_NN,y_train);

%% Using advanced optimization algorithm fmincg() to achieve global minima
% Return the cost and grad values
options = optimset('MaxIter', 300); % Setting number of iterations
costFunction = @(p) nn_cost_function(p, input_layer_size, ...
                                        hidden_layer_size, T_train_NN,y_train);
% Learning Process
[params, cost] = fmincg(costFunction, initial_theta, options);

% Reshaping params into updated_theta1 and updated_theta2
updated_theta1 = reshape(params(1:((input_layer_size+1)*hidden_layer_size)), ...
                    [hidden_layer_size,input_layer_size+1]);
updated_theta2 = reshape(params(((input_layer_size+1)*hidden_layer_size)+1:end), ...
            [9,hidden_layer_size+1]);  

%% Predicting y labels with optimized parameters
y_predict_NN = determine_output(updated_theta1,updated_theta2,T_valid_NN);

%% Plotting the confusion matrix for NN
figure
plotconfusion(full(ind2vec(y_valid.')),full(ind2vec(y_predict_NN.')))

%% Saving the variables
save Malware_classification_variables X_valid y_valid X_train y_train ...
    N_PCA_kNN N_PCA_NN N_PCA_SVM T_valid_kNN T_valid_SVM T_valid_NN ...
    knn svm y_predict_kNN y_predict_NN y_predict_SVM updated_theta1 ...
    updated_theta2 costFunction